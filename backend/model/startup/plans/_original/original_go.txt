// Package original is my attempt to create a lesson plan for beginners.
// It might suck.
package original

import (
	"fmt"

	"github.com/josephbudd/okp/backend/shuffle"
	"github.com/josephbudd/okp/shared/store"
	"github.com/josephbudd/okp/shared/store/record"
)

const (
	PlanName = "My attempt at a practical method."
	planDesc = "The app's original plan"

	maxWordSize  = 5
	maxWordCount = 5
)

type charWordsData struct {
	Character string
	Words     []string
	Digits    []string
}

var (
	// The first lesson. A character and word test.
	// The user will practice and test for 3 characters.
	// Then the user will practice and test for words made from those 3 characters.
	// Here the keycodes are defined by there character.
	firstLessonKeyCodeChars = []string{"A", "C", "T"}
	firstLessonWords        = []string{"A", "AT", "ACT", "CAT"}

	// A collection of lessons that follow the first lesson will involve
	//  1. a character test of a single character or number.
	//  2. a word test which include only the characters that the user has learned so far.
	//  3. no sentence tests.
	charWords = []charWordsData{
		{
			Character: "A",
		},
		{
			Character: "C",
			Words:     []string{"AC", "CA", "CC", "AA"},
		},
		{
			Character: "T",
			Words:     []string{"TACK", "KAT", "AK"},
		},
		{
			Character: "K",
			Words:     []string{"TACK", "KAT", "AK"},
		},
		{
			Character: "U",
			Words:     []string{"TUCK", "CUT", "CUCK"},
		},
		{
			Character: "Q",
			Words:     []string{"QUACK"},
		},
		{
			Character: "D",
			Words:     []string{"QUAD", "TAD", "CAD", "DAD", "DUD", "DUCK", "DUCT"},
		},
		{
			Character: "E",
			Words:     []string{"KATE", "TAKE", "EAT", "ATE", "DATE", "DEAD", "QUAKE", "DUDE", "CUTE"},
		},
		{
			Character: "S",
			Words:     []string{"SKATE", "TAKES", "STAKE", "DATES", "EATS", "QUAKES", "QUADS", "CATS", "SAD", "SAT", "SACK", "SACKED"},
		},
		{
			Character: "B",
			Words:     []string{"BAD", "BADASS", "BAKE", "BUCK", "BAKED", "BAKES", "BACK", "TAB", "TUB", "CAB", "CUB", "BACKED"},
		},
		{
			Character: "1",
			Digits:    []string{"1"},
		},
		{
			Character: "6",
			Digits:    []string{"1", "6"},
		},
		{
			Character: "R",
			Words:     []string{"CAR", "TAR", "BAR", "RAT", "RACK", "SKATER", "RAKE", "RAD", "BRAT", "EAR", "TEAR", "TRUCK", "TRACK"},
		},
		{
			Character: "H",
			Words:     []string{"STASH", "HAT", "HUT", "THUD", "HASH", "RAH", "THAT", "THE", "HATE", "HEAT", "HEAR", "HEARTH", "DEATH", "CATCH", "HATCH"},
		},
		{
			Character: "F",
			Words:     []string{"FAT", "FAD", "FED", "FAB", "FEAT", "FACT", "EFFECT", "DEAF", "DEFEAT", "THEFT", "FAKE", "FRAT", "FAKE", "FADE"},
		},
		{
			Character: "2",
			Digits:    []string{"1", "2", "6"},
		},
		{
			Character: "7",
			Digits:    []string{"1", "2", "6", "7"},
		},
		{
			Character: "I",
			Words:     []string{"I", "QUICK", "TICK", "KIT", "KID", "IDEA", "BID", "CRIB", "THICK", "FIT", "QUID", "SIT", "SICK", "TIP", "TIRE", "BRIT", "CHICK"},
		},
		{
			Character: "G",
			Words:     []string{"GI", "GIG", "BIG", "BAG", "BUG", "RIG", "RAB", "RUG", "HUG", "HUGE", "DIG", "DUG", "GIFT", "GEAR", "THUG", "KING"},
		},
		{
			Character: "J",
			Words:     []string{"JIG", "JUG", "JUNK", "JACK", "JUST", "JAR", "JUDGE"},
		},
		{
			Character: "3",
			Digits:    []string{"1", "2", "3", "6", "7"},
		},
		{
			Character: "8",
			Digits:    []string{"1", "2", "3", "6", "7", "8"},
		},
		{
			Character: "O",
			Words:     []string{"OH", "HO", "DOCK", "ROAD", "BROAD", "TORE", "HOT", "COAT", "DOG", "GOD", "JOG", "JOKE", "JOKER", "BOB"},
		},
		{
			Character: "L",
			Words:     []string{"LUCK", "LACK", "DULL", "EAL", "LICK", "FALL", "FELL", "HELL", "HILL", "HALL", "HALT", "QUIL", "QUILT", "TILL", "SILL"},
		},
		{
			Character: "M",
			Words:     []string{"MAT", "MILL", "AMMO", "SMALL", "THUMB", "BOMB", "BUMP", "SUMP", "FAME", "DUMB", "HUMP", "THUMP", "MOSS"},
		},
		{
			Character: "N",
			Words:     []string{"KNAT", "BINGO", "TANGO", "FINE", "TONE", "TUNE", "NEAR", "KNACK", "FUME", "FIG", "FUNK"},
		},
		{
			Character: "P",
			Words:     []string{"POOR", "PIG", "TIP", "BOP", "POD", "POGO", "HUMP", "PEAT", "POSIT", "PACT", "CRAP", "PRICK"},
		},
		{
			Character: "4",
			Digits:    []string{"1", "2", "3", "4", "6", "7", "8"},
		},
		{
			Character: "9",
			Digits:    []string{"1", "2", "3", "4", "6", "7", "8", "9"},
		},
		{
			Character: "V",
			Words:     []string{"VALUE", "DIVE", "DOVE", "RIVAL", "VAT", "VIBE", "VAST"},
		},
		{
			Character: "W",
			Words:     []string{"VIEW", "WE", "WERE", "WIG", "FEW", "BREW", "SAW", "JAW", "THAW", "TOW", "BOW", "COW"},
		},
		{
			Character: "Y",
			Words:     []string{"YES", "VERY", "FUNNY", "SYNC", "YOU", "SILLY", "HILLY", "HOLLY", "COY", "DYI"},
		},
		{
			Character: "X",
			Words:     []string{"XRAY", "EXTRA", "EXAM", "DOX", "SEXY", "AX"},
		},
		{
			Character: "Z",
			Words:     []string{"ZEBRA", "OZ", "COZY", "JAZZ", "JAZZY", "ZAP", "FONZ", "ZOO", "FIZ"},
		},
		{
			Character: "5",
			Digits:    []string{"1", "2", "3", "4", "5", "6", "7", "8", "9"},
		},
		{
			Character: "0",
			Digits:    []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "0"},
		},
	}

	// This slice of keycode names is character only tests.
	// I could have use the keycode character shown in the comments but i'm doing this to demonstrate how to refer to keycodes by their name, not their character.
	// That is because some characters have more than 1 use so I have given characters names which are always unique.
	// There are no words and there are no sentences.
	lessonKeyCodeNames3 = []string{
		"Calling Anyone", "This Is", "Back To You", "Error",
		// "CQ", "DE", "BTU", "HH",
		"NewParagraph", "End Of Contact", "No Reply Expected, NewMessage",
		// "BT", "SK", "AR",
	}

	// This slice of keycode characters and these are character only tests.
	// There are no words and there are no sentences.
	lessonKeyCodeChars4 = []string{
		".", ",", "?",
	}
)

// Create creates the plan in the stores if it does not already exist.
func Create(
	stores *store.Stores,
	keyCodeCharMap map[string]*record.KeyCode,
	keyCodeNameMap map[string]*record.KeyCode,
	keyCodeIDMap map[uint64]*record.KeyCode,
) (err error) {

	defer func() {
		if err != nil {
			err = fmt.Errorf("original.Create: %w", err)
		}
	}()

	// Find this plan in the stores.
	var plans []*record.Plan
	if plans, err = stores.Plan.GetAll(); err != nil {
		return
	}
	if len(plans) > 0 {
		for _, plan := range plans {
			if plan.Name == PlanName {
				// This lesson plan has already been created.
				return
			}
		}
	}

	// Create this plan.
	plan := record.NewPlan(PlanName, planDesc)
	if plan.Lessons, err = lessons(stores, keyCodeCharMap, keyCodeNameMap, keyCodeIDMap); err != nil {
		return
	}
	err = stores.Plan.Update(plan)
	return
}

func lessons(
	stores *store.Stores,
	keyCodeCharMap map[string]*record.KeyCode,
	keyCodeNameMap map[string]*record.KeyCode,
	keyCodeIDMap map[uint64]*record.KeyCode,
) (lessons []record.Lesson, err error) {

	defer func() {
		if err != nil {
			err = fmt.Errorf("lessons: %w", err)
		}
	}()

	lessons = make([]record.Lesson, 0, 1024)
	var lesson record.Lesson
	var lessonNumber uint64
	var desc string
	var randomWords []string
	// Character, Words Lessons.
	// The following lessons each have
	//  * only one character,
	//  * words using that character and characers from previous lessons.
	for i, cw := range charWords {
		// The character lesson.
		var keyCode *record.KeyCode
		var found bool
		if keyCode, found = keyCodeCharMap[cw.Character]; !found {
			err = fmt.Errorf("charWords[%d]: no key code for the character %q", i, cw.Character)
			return
		}
		switch {
		case cw.Character >= "0" && cw.Character <= "9":
			desc = fmt.Sprintf("The number %s.", cw.Character)
		case cw.Character >= "A" && cw.Character <= "Z":
			desc = fmt.Sprintf("The letter %q.", cw.Character)
		default:
			desc = fmt.Sprintf("The punctation %q.", cw.Character)
		}
		lessonNumber++
		if lesson, err = record.BuildCharacterLesson(
			fmt.Sprintf("Lesson %d.", lessonNumber),
			desc,
			lessonNumber,
			keyCode,
		); err != nil {
			return
		}
		lessons = append(lessons, lesson)
		// The character's word lessons.
		// Define the description and the word key codes.
		var wordKeyCodes []*record.KeyCode
		switch {
		case cw.Character >= "0" && cw.Character <= "9":
			desc = fmt.Sprintf("A number containing the digit %q.", cw.Character)
			ldigits := len(cw.Digits)
			srcKeyCodes := make([]*record.KeyCode, ldigits)
			for j, digit := range cw.Digits {
				if keyCode, found = keyCodeCharMap[digit]; !found {
					err = fmt.Errorf("charWords[%d]: no key code for the digit character %q", i, digit)
				}
				srcKeyCodes[j] = keyCode
			}
			wordKeyCodes = shuffle.KeyCodeWord(srcKeyCodes, maxWordSize)
		case cw.Character >= "A" && cw.Character <= "Z":
			desc = fmt.Sprintf("A word containing the letter %q.", cw.Character)
			index := shuffle.RandomInt(len(cw.Words))
			word := cw.Words[index]
			wordKeyCodes := make([]*record.KeyCode, len(word))
			for j, r := range word {
				ch := string(r)
				if keyCode, found = keyCodeCharMap[ch]; !found {
					err = fmt.Errorf("charWords[%d]: no key code for the word character %q", i, cw.Character)
				}
				wordKeyCodes[j] = keyCode
			}
		default:
			desc = fmt.Sprintf("A word containing the punctation %q.", cw.Character)
		}
		lessonNumber++
		if lesson, err = record.BuildWordLesson(
			fmt.Sprintf("Lesson %d.", lessonNumber),
			desc,
			lessonNumber,
			wordKeyCodes,
		); err != nil {
			return
		}
		lessons = append(lessons, lesson)
	}

	// Lessons 3.
	// There are no words or sentences, just the characters to learn.
	for _, kcname := range lessonKeyCodeNames3 {
		lessonNumber++
		name = fmt.Sprintf("Lesson %d.", lessonNumber)
		keycode := keyCodeNameMap[kcname]
		if keycode.IsCompression {
			desc = fmt.Sprintf("%q which means %q\nand is keyed like a single character as %q", keycode.Character, kcname, keycode.DitDah)
		} else {
			desc = fmt.Sprintf("%q which means %q", keycode.Character, kcname)
		}
		if lessonR, err = record.BuildLesson(
			name,
			desc,
			lessonNumber,
			nil, []string{kcname}, // 1 Keycode character.
			nil, // Keycode words using this character and those form previous lessons.
			nil, // No keycode sentences.
			keyCodeCharMap, keyCodeNameMap,
		); err != nil {
			return
		}
		lessons = append(lessons, lessonR)
	}

	// Lessons 4.
	// There are no words or sentences, just the characters to learn.
	for _, ch := range lessonKeyCodeChars4 {
		lessonNumber++
		name = fmt.Sprintf("Lesson %d.", lessonNumber)
		desc = fmt.Sprintf("%q.", ch)
		if lessonR, err = record.BuildLesson(
			name,
			desc,
			lessonNumber,
			[]string{ch}, nil, // 1 Keycode character.
			nil, // Keycode words using this character and those form previous lessons.
			nil, // No keycode sentences.
			keyCodeCharMap, keyCodeNameMap,
		); err != nil {
			return
		}
		lessons = append(lessons, lessonR)
	}

	return
}
